Index: network-manager/src/core/nm-core-utils.c
===================================================================
--- network-manager.orig/src/core/nm-core-utils.c
+++ network-manager/src/core/nm-core-utils.c
@@ -4768,6 +4768,7 @@ get_max_rate_vht(const guint8 *bytes, gu
 #define WLAN_EID_HT_CAPABILITY   45
 #define WLAN_EID_VHT_CAPABILITY  191
 #define WLAN_EID_VENDOR_SPECIFIC 221
+#define WLAN_EID_EXTENSION       255
 
 void
 nm_wifi_utils_parse_ies(const guint8 *bytes,
@@ -4822,6 +4823,72 @@ nm_wifi_utils_parse_ies(const guint8 *by
             break;
         }
 
+        len -= elem_len;
+        bytes += elem_len;
+    }
+}
+
+/*****************************************************************************/
+
+void
+nm_wifi_utils_parse_ies_ex(const guint8 *bytes,
+                           gsize         len,
+                           guint32      *out_max_rate,
+                           gboolean     *out_metered,
+                           gboolean     *out_owe_transition_mode,
+                           gboolean     *out_he_support)
+{
+    guint8  id, elem_len;
+    guint32 m;
+
+    NM_SET_OUT(out_max_rate, 0);
+    NM_SET_OUT(out_metered, FALSE);
+    NM_SET_OUT(out_owe_transition_mode, FALSE);
+    NM_SET_OUT(out_he_support, FALSE);
+
+    while (len) {
+        if (len < 2)
+            break;
+
+        id       = *bytes++;
+        elem_len = *bytes++;
+        len -= 2;
+
+        if (elem_len > len)
+            break;
+
+        switch (id) {
+        case WLAN_EID_HT_CAPABILITY:
+            if (out_max_rate) {
+                if (get_max_rate_ht(bytes, elem_len, &m))
+                    *out_max_rate = NM_MAX(*out_max_rate, m);
+            }
+            break;
+        case WLAN_EID_VHT_CAPABILITY:
+            if (out_max_rate) {
+                if (get_max_rate_vht(bytes, elem_len, &m))
+                    *out_max_rate = NM_MAX(*out_max_rate, m);
+            }
+            break;
+        case WLAN_EID_VENDOR_SPECIFIC:
+            if (len == 8 && bytes[0] == 0x00 /* OUI: Microsoft */
+                && bytes[1] == 0x50 && bytes[2] == 0xf2
+                && bytes[3] == 0x11) /* OUI type: Network cost */
+            {
+                /* https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nct/ */
+                NM_SET_OUT(out_metered, (bytes[4] > 1)); /* Cost level > 1 */
+            }
+            if (elem_len >= 10 && bytes[0] == 0x50 /* OUI: WiFi Alliance */
+                && bytes[1] == 0x6f && bytes[2] == 0x9a
+                && bytes[3] == 0x1c) /* OUI type: OWE Transition Mode */
+                NM_SET_OUT(out_owe_transition_mode, TRUE);
+            break;
+        case WLAN_EID_EXTENSION:
+            if (elem_len > 0 && bytes[0] == 0x23)
+                NM_SET_OUT(out_he_support, TRUE);
+            break;
+        }
+
         len -= elem_len;
         bytes += elem_len;
     }
Index: network-manager/src/core/supplicant/nm-supplicant-interface.c
===================================================================
--- network-manager.orig/src/core/supplicant/nm-supplicant-interface.c
+++ network-manager/src/core/supplicant/nm-supplicant-interface.c
@@ -764,10 +764,15 @@ _bss_info_properties_changed(NMSupplican
     if (v_v) {
         gboolean p_owe_transition_mode;
         gboolean p_metered;
+        gboolean p_he_support;
         guint32  rate;
 
         arr_data = g_variant_get_fixed_array(v_v, &arr_len, 1);
-        nm_wifi_utils_parse_ies(arr_data, arr_len, &rate, &p_metered, &p_owe_transition_mode);
+        nm_wifi_utils_parse_ies_ex(arr_data, arr_len, &rate, &p_metered, &p_owe_transition_mode, &p_he_support);
+        if (p_he_support)
+			bss_info->rsn_flags |= NM_802_11_AP_FLAGS_HE;
+		else
+			bss_info->rsn_flags &= ~NM_802_11_AP_FLAGS_HE;
         p_max_rate     = NM_MAX(p_max_rate, rate);
         p_max_rate_has = TRUE;
         g_variant_unref(v_v);
Index: network-manager/src/libnm-core-public/nm-dbus-interface.h
===================================================================
--- network-manager.orig/src/libnm-core-public/nm-dbus-interface.h
+++ network-manager/src/libnm-core-public/nm-dbus-interface.h
@@ -336,6 +336,7 @@ typedef enum /*< flags >*/ {
  * @NM_802_11_AP_FLAGS_WPS: access point supports some WPS method
  * @NM_802_11_AP_FLAGS_WPS_PBC: access point supports push-button WPS
  * @NM_802_11_AP_FLAGS_WPS_PIN: access point supports PIN-based WPS
+ * @NM_802_11_AP_FLAGS_HE: access point support high efficiency (new feature in 802.11ax)
  *
  * 802.11 access point flags.
  **/
@@ -345,6 +346,7 @@ typedef enum /*< underscore_name=nm_802_
     NM_802_11_AP_FLAGS_WPS     = 0x00000002,
     NM_802_11_AP_FLAGS_WPS_PBC = 0x00000004,
     NM_802_11_AP_FLAGS_WPS_PIN = 0x00000008,
+    NM_802_11_AP_FLAGS_HE      = 0x00000010,
 } NM80211ApFlags;
 
 /**
Index: network-manager/src/core/nm-core-utils.h
===================================================================
--- network-manager.orig/src/core/nm-core-utils.h
+++ network-manager/src/core/nm-core-utils.h
@@ -453,6 +453,15 @@ void nm_wifi_utils_parse_ies(const guint
                              gboolean     *out_metered,
                              gboolean     *out_owe_transition_mode);
 
+//UOS add wifi6
+void nm_wifi_utils_parse_ies_ex(const guint8 *bytes,
+                                gsize         len,
+                                guint32      *out_max_rate,
+                                gboolean     *out_metered,
+                                gboolean     *out_owe_transition_mode,
+                                gboolean     *out_he_support);
+//---------------------------------------------------------------------------
+
 guint8 nm_wifi_utils_level_to_quality(int val);
 
 /*****************************************************************************/
